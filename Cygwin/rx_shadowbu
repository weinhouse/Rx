#!/bin/bash

#$Header: /home/larryw/MyDocs/CygwinScripts/bin/rx_shadowbu,v 1.3 2011/09/12 06:03:37 larryw Exp $

# This script is used to back up a users directory to an external hard drive
# It will create a mirror on the external drive and place deleted files in
# an Archive directory. Archives need to be purged manually.
# prerequisites are Cygwin, and vshadow(to snapshot users directory), Install
# Instructions on the setup can be found at:
# https://sites.google.com/a/rx4systems.com/public/windows-7-with-cygwin

set -e
set -u

shadowdrive="C:"
shadowdir="LWvshadow"
shadowsource="/cygdrive/c/${shadowdir}/Users/larryw"
logdir="/var/log/rx4systems"

# The following two directories will need to exist, note, this is cygwin path
# Include ${destarchive} as a sub-directory of ${destdir}
destdir="/cygdrive/C/BU/"
destarchive="Archives_/"

# Should not need to edit the following variables.
snapshotinfo="${logdir}/snapshotinfo.log"
templog="${logdir}/${shadowdir}.tmp.log"
bulog="${logdir}/${shadowdir}.log"
errorlog="${logdir}/errors.log"
archivedir="$(basename $0)-$(date +%b%d_%I%M%P.%s)"
lockfile="/tmp/$(basename $0).lock"
timestamp=$(date "+%D %T")
mailtowho="larry@weinhouse.com"

pidcount=0
while true; do
   if [ -f "${lockfile}" ] &&
       ps -ea | cut -c 6- | awk '{print $1}' | grep \
       ^$(cat "${lockfile}")$ > /dev/null 2>&1
   then
       sleep 5
       if [ "${pidcount}" -gt 2 ]; then
           echo "${timestamp} Issues $0 long standing lock" >> ${errorlog}
           exit 1
       fi
       let pidcount=pidcount+1
   else
       break
   fi
done
echo $$ > "${lockfile}"

function print_header () {
    line=$(seq -s "=" 40 | sed 's/[0-9]//g')
    printf "\n%s\n%s\n%s\n" "${line}" \
                            "Backup Log, $(basename $0) for: $(date)" \
                            "${line}" >> "${bulog}" 
}

function keep_window_open () {
    printf "\n\n%s" "Press Enter key to exit: "
    trap "exit 2" INT TERM 
    read JustWaitForEntry
    trap - INT TERM
}

function err_check () {
    theerror=$1
    echo "${theerror}" | mutt.exe -s "error in $0 script:" "${mailtowho}" 
    printf "\n%s" "${theerror}"
    keep_window_open
    exit 1
}

function drive_error () {
    driveletter="$(echo $destdir | awk -F "/" '{print $3}' | \
                tr "[:lower:]" "[:upper:]")"
    printf "\n%s%s\n%s" \
    "Confirm that an external drive is attached and seen as "\
    "${driveletter:-x}:\\" \
    "This script is looking for a backup directory: ${destdir}"
    keep_window_open 
    touch /tmp/outofhere
    exit 1
}

function do_sync () {
/usr/bin/nice /usr/bin/rsync -av --del --backup \
--backup-dir="${destdir}${destarchive}${archivedir}" \
"${shadowsource}" "${destdir}" > "${templog}" 2>&1 || \
err_check "Error running rsync to sync files to: ${destdir}${destarchive}"
}

function grep_snapshotid () {
    if vshadow.exe -q | grep -i -B 9 ".*Exposed.*"${shadowdir} >/dev/null 2>&1
    then
        snapid=$(vshadow.exe -q | grep -i -B 9 ".*Exposed.*"${shadowdir}"" | \
        grep SNAPSHOT |awk '{print $5}') || \
        err_check "Error when discovering snapshot ID"
    else
        snapid=""
    fi
}

function create_persistent () {
    vshadow.exe -p "${shadowdrive}" > "${snapshotinfo}" || \
    err_check "Error while creating persistent shapshot for ${shadowdrive}"
}

function expose_shadow () {
    SNAPSHOT_ID=$1
    vshadow.exe -el="${SNAPSHOT_ID}","${shadowdrive}"\\"${shadowdir}" > \
    /dev/null 2>&1 || \
    err_check "Error while exposing the shadow copy"
}

function delete_shadow () {
    vshadow.exe -ds="${snapid}" > /dev/null 2>&1 || \
    err_check "Error while trying to delete the shadow copy"
}


# main

# make the following directories if they are not already there:
mkdir -p /cygdrive/c/"${shadowdir}" "${logdir}"

# Check for connected external drive and backup directory.
ls -d "${destdir}${destarchive}" >/dev/null 2>&1 || drive_error 

echo "Deleting old snapshot information. . ."
if [ -e "${snapshotinfo}" ]; then
    rm -f "${snapshotinfo}" || \
    err_check "Error while trying to delete the snapshotinfo file"
fi

# Check for existing snapshot and delete
grep_snapshotid
if [ -n "${snapid}" ]; then
   delete_shadow
fi

# Confirm snapshot deletion, and make a new snapshot ${shadowdrive}
echo "Confirm removal of old snapshot and create new. . ."
grep_snapshotid
if [ -z "${snapid}" ]; then
    create_persistent
    idfromfile=$(grep "SNAPSHOT ID" "${snapshotinfo}" | awk '{print $5}')
    expose_shadow "${idfromfile}"
fi

echo "Doing the sync, might take a while you can continue working. . ."
do_sync

# Create log, exclude {Users Directory}/AppData directory. 
clear
print_header
echo -e "\nYou just backed up the following files:"
grep -v larryw/AppData ${templog}  | tee -a "${bulog}" \

# Rotate log after 10 backups:
if [ $(grep "Backup Log" "${bulog}" | wc -l) -gt 10 ]; then
    cat "${bulog}" | mutt -s "Log rotated on ${HOSTNAME} after 10 backups" \
    "${mailtowho}"
    cat /dev/null > "${bulog}" 
fi

rm -f "${lockfile}"
keep_window_open

exit 0
