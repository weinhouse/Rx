#!/bin/bash
# $Header: /root/bin/offsite.sh,v 1.15 2013/08/08 14:23:35 root Exp root $

# By Larry Weinhouse, no warrenty, use at your own risk :-)
# This script is for making an offsite backup. use two or three drives. plug
  # a labeled drive(see below) in, script will detect it, mount copy files and unmount.
  # you will be notifite after 30 days to rotate your disks offsite + error checking
  # and logging, drive will be unmounted after run so it can just be unplugged. 
# Drives must have a disk label "offsitebu<X> or change ${label_name} below" 
  # for example e2label /dev/sde1 offsitebu1 adds label to first partition sde1. 
# Run as cron job I do this once per day.

# define variables
bu_name="Friar"
backupdirs="/home /etc /root /media/extdrive/mikewbu"
mailtowho="larry@rx4systems.com"
# You may get away with just assigning the above variables if you can accept 
  # the following.
logdir="/etc/offsitebu"                 # will be created for you
config_file="${logdir}/offsitebu.conf"  # will be created for you
log_file="${logdir}/offsitebu.log"      # will be created for you
offsitebu_dir="/media/offsitebu_dir"    # will be created for you
drive_type="sd"                         # ie. sd for sata, hd for ide
label_name="offsitebu"                  # for two drives label them "offsidebu1" and "offsitebu2"
PATH="${PATH}:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin"
current_time=$(date +%s)

# Make log and offsite bu dirs if not already created.
mkdir -p ${logdir}
mkdir -p ${offsitebu_dir}

error_chk () {
if [ $? -gt 0 ]; then
   echo $1 | mail -s "Offsite Backup Error" $mailtowho
   exit 1
fi
}

output_config_file () {
printf "%s\n\n\
%s\t\t%s\t\t%s\t%s\n  \
%s\t\t%s\t\t%s\t%s\n" \
"# This file generated by $0 script, do not hand edit" \
"# Disk Name" "Start Date" "Size" "Number of Files" \
${drive_label} ${current_time} ${current_size} ${current_number_of_files} > \
${config_file}
error_chk "Error writing data to ${config_file}"
}

get_volume_info () {
current_size=$(du -sh ${offsitebu_dir} | awk '{print $1}')
error_chk "Error trying to discover the current size of offsite bu drive."
current_number_of_files=$(find ${offsitebu_dir} | wc -l)
error_chk "Error trying to discover number of files on offsite bu drive."
}

conf_file_data () {
org_stats=($(grep -v ^# $config_file))
error_chk "Unable to gather information from config file ${config_file}."
org_drive_label=$(echo ${org_stats[0]})
org_current_time=$(echo ${org_stats[1]})
org_current_size=$(echo ${org_stats[2]})
org_current_number_of_files=($echo ${org_stats[3]})
}

# build the list of drive devices with their label names 
drive_attached=""
drive_list () {
     new_drive_info=$1
     drive_attached="${drive_attached} ${new_drive_info}"
}

discover_attached_drives () {
for i in $(ls /dev/${drive_type}* | grep [0-9]$)
do
   if e2label $i 2>/dev/null | grep -q ${label_name}; then
      drive_list "$i $(e2label $i)"
   fi
done
if [ -z "${drive_attached}" ]; then
   false; error_chk "Looks like there is not an offsite bu drive connected"
fi
if [ $(echo "${drive_attached}" | wc -w) -gt 2 ]; then
   false; error_chk "Looks like you have more that one drive attached: ${drive_attached}"
fi
the_drive=$(echo ${drive_attached} | awk '{print $1}')
drive_label=$(echo ${drive_attached} | awk '{print $2}')
}

unmount_volume () {
if $(mount | grep -q "${the_drive}"); then 
  umount ${the_drive}
  error_chk "Unable to unmount ${drive_attached}."
fi
}

mount_volume () {
mount ${the_drive} ${offsitebu_dir} 
error_chk "Was not able to mount ${drive_attached}"
}

print_header () {
echo -e "\n=============================================="     >> $2
echo      "$1 $(date)"                                         >> $2
echo      "=============================================="     >> $2
}

rsync_backup () {
for i in ${backupdirs}; do
   rsync -av --delete $i ${offsitebu_dir} >> ${log_file} 2>&1
   error_chk "Some sort of rsync error backing up ${i} for offsite backup"
done
}

days_since_started () {
sec_since_last=$((( ${current_time} - ${org_current_time})))
days_since_last=$((( ${sec_since_last} / 86400)))
}

delivery_message () {
printf "${bu_name} backup disk named %s has been replaced by %s\n\
Size of backup went from %s to %s\n\
Number of files went from %s to %s\n\n%s\n" \
${org_drive_label} ${drive_label} \
${org_current_size} ${current_size} \
${org_current_number_of_files} ${current_number_of_files} \
"Successful Syncs were performed on the following:" > /tmp/$$myfile
cat ${log_file} | grep ^"${backupdirs}" >> /tmp/$$myfile 
cat /tmp/$$myfile | mail -s "Offsite Backup Was Delivered" ${mailtowho}
error_chk "There was an error trying to mail the offsite backup delivery message"
rm -f /tmp/$$myfile
}

rotate_log () {
cp --force ${log_file} ${log_file}.bu
error_chk "There was an error trying to rotate the log file"
rm -f ${log_file}
}

# main
discover_attached_drives

unmount_volume

mount_volume

get_volume_info

# Check for existing config_file
if [ -f ${config_file} ]; then
  conf_file_data
else
  output_config_file
  conf_file_data
fi

# Check for new disk attached.
if [ ${org_drive_label} != ${drive_label} ]; then
   delivery_message
   output_config_file
   conf_file_data
   rotate_log
fi

print_header "${backupdirs}" ${log_file}
rsync_backup

days_since_started

# Afer 30 days of backups, this will run until you swap drives
if [ ${days_since_last} -gt 30 ]; then
   echo "Has been ${days_since_last} days since offsite backup was rotated" \
         | mail -s "Need to rotate offsite backup disk" $mailtowho
fi

unmount_volume
